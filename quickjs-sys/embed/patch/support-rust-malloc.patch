diff --git a/cutils.h b/cutils.h
index 26436d4..37d3ce1 100644
--- a/cutils.h
+++ b/cutils.h
@@ -482,17 +482,11 @@ void rqsort(void *base, size_t nmemb, size_t size,
 int64_t js__gettimeofday_us(void);
 uint64_t js__hrtime_ns(void);
 
+size_t rust_usable_size(const void* p);
+
 static inline size_t js__malloc_usable_size(const void *ptr)
 {
-#if defined(__APPLE__)
-    return malloc_size(ptr);
-#elif defined(_WIN32)
-    return _msize((void *)ptr);
-#elif defined(__linux__) || defined(__ANDROID__) || defined(__CYGWIN__) || defined(__FreeBSD__)
-    return malloc_usable_size((void *)ptr);
-#else
-    return 0;
-#endif
+    return rust_usable_size(ptr);
 }
 
 /* Cross-platform threading APIs. */
diff --git a/quickjs.c b/quickjs.c
index d9f670f..fa01404 100644
--- a/quickjs.c
+++ b/quickjs.c
@@ -1698,7 +1698,7 @@ static void *js_def_malloc(JSMallocState *s, size_t size)
     if (unlikely(s->malloc_size + size > s->malloc_limit - 1))
         return NULL;
 
-    ptr = malloc(size);
+    ptr = rust_malloc(size);
     if (!ptr)
         return NULL;
 
@@ -1714,7 +1714,7 @@ static void js_def_free(JSMallocState *s, void *ptr)
 
     s->malloc_count--;
     s->malloc_size -= js__malloc_usable_size(ptr) + MALLOC_OVERHEAD;
-    free(ptr);
+    rust_free(ptr);
 }
 
 static void *js_def_realloc(JSMallocState *s, void *ptr, size_t size)
@@ -1730,14 +1730,14 @@ static void *js_def_realloc(JSMallocState *s, void *ptr, size_t size)
     if (size == 0) {
         s->malloc_count--;
         s->malloc_size -= old_size + MALLOC_OVERHEAD;
-        free(ptr);
+        rust_free(ptr);
         return NULL;
     }
     /* When malloc_limit is 0 (unlimited), malloc_limit - 1 will be SIZE_MAX. */
     if (s->malloc_size + size - old_size > s->malloc_limit - 1)
         return NULL;
 
-    ptr = realloc(ptr, size);
+    ptr = rust_realloc(ptr, size);
     if (!ptr)
         return NULL;
 
diff --git a/quickjs.h b/quickjs.h
index 90a8924..8ec0e7d 100644
--- a/quickjs.h
+++ b/quickjs.h
@@ -358,6 +358,10 @@ JS_EXTERN JS_BOOL JS_IsSameValueZero(JSContext *ctx, JSValue op1, JSValue op2);
 JS_EXTERN JSValue js_string_codePointRange(JSContext *ctx, JSValue this_val,
                                  int argc, JSValue *argv);
 
+void *rust_malloc(size_t size);
+void *rust_realloc(void* p, size_t newsize);
+void rust_free(void* p);
+
 JS_EXTERN void *js_malloc_rt(JSRuntime *rt, size_t size);
 JS_EXTERN void js_free_rt(JSRuntime *rt, void *ptr);
 JS_EXTERN void *js_realloc_rt(JSRuntime *rt, void *ptr, size_t size);
